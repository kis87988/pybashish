Welcome to testing PyBashIsh


Contents
========

+ 1. Welcome

++ 1.1 ) Hello Bash Doc World
++ 1.2 ) PyBashIsh works like Bash

+ 2 ) Man PyBashIsh All

++ 2.1 ) ArgDoc
++ 2.2 ) Bash
++ 2.3 ) Bind
++ 2.4 ) Cal
++ 2.5 ) Cat
++ 2.6 ) Cp
++ 2.7 ) Column
++ 2.8 ) CspSh
++ 2.9 ) Date
++ 2.10 ) Dd
++ 2.11 ) DocTestBash
++ 2.12 ) Echo
++ 2.13 ) Exit
++ 2.14 ) Expand
++ 2.15 ) Find
++ 2.16 ) Fmt
++ 2.17 ) Grep
++ 2.18 ) Help
++ 2.19 ) HexDump
++ 2.20 ) History
++ 2.21 ) Hostname
++ 2.22 ) Jq
++ 2.23 ) Ls
++ 2.24 ) Make
++ 2.25 ) MkDir
++ 2.26 ) Mv
++ 2.27 ) Pwd
++ 2.28 ) Read
++ 2.29 ) Rm
++ 2.30 ) SubSh
++ 2.31 ) Tar
++ 2.32 ) Touch
++ 2.33 ) Tr
++ 2.34 ) Watch
++ 2.35 ) Wc
++ 2.36 ) XArgs

+ 3 ) Additional tests


To refresh this table of contents, try:

    cat tests/pybashish.typescript | grep '^#'



# 1. Welcome

## 1.1 ) Hello Bash Doc World

This file is a Bash Doc Test file

This file is like a Doc Test file of Python "import doctest",
except this file is for testing Python inside Bash, not for testing Python apart from Bash

    https://docs.python.org/library/doctest.html

To run this file, try:

    bin/doctestbash.py tests/pybashish.typescript


## 1.2 ) PyBashIsh works like Bash

You can call PyBashIsh in place of Bash

PyBashIsh is bits of Bash, rewritten in the kinder Literate programming style, as Python

PyBashIsh does a few things much much better, some things just as well, and many things more poorly

    $ bin/pwd_.py
    .../pybashish
    $

    $ (echo; echo echo "'Hello, PyBashish World.'"; echo; echo help) | python3 ../pybashish/

    Pybashish 0.x.y for Linux and Mac OS Terminals
    Type "help" and press Return for more information.
    Type "exit" and press Return to quit, or press ⌃D EOF to quit

    ...@...:...$
    (pybashish) $
    (pybashish) $ echo 'Hello, PyBashish World.'
    Hello, PyBashish World.
    (pybashish) $
    (pybashish) $ help

    Python apps should introduce themselves well

    Try typing the name of the app, and add ' --h'
    For instance, to learn more of 'bin/echo.py', try:

        echo --h

    Many apps will say hello well if you type just one dash
    For instance, try:

        grep -h | head

    Next try one of:

        argdoc  bash  bind  cal  cat  column  cp  cspsh  date  dd  doctestbash  echo  exit
        expand  find  fmt  grep  help  hexdump  history  hostname  jq  ls  make  mkdir  mv
        pwd  read  rm  subsh  tar  touch  tr  watch  wc  xargs

    (pybashish) $
    + exit 1
    $

It's a bug if it surprises you, because a bug is a thing that bother somebody who matters, and
you matter

Please tell us about it


# 2 ) Man PyBashIsh All


## 2.1 ) ArgDoc

ArgDoc compiles standard Python Arg Docs into standard Python ArgParser Parsers

Compiling "/dev/null" gives you an Arg Doc that works, to start with

    $ bin/argdoc.py -ijk
    usage: argdoc.py [-h] [--rip SHRED] [FILE] [-- [ARG [ARG ...]]]
    argdoc.py: error: unrecognized arguments: -ijk
    + exit 2
    $

    $ bin/argdoc.py
    #!/usr/bin/env python3

    """
    usage: null [-h]

    do good stuff

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      Oh no! No examples disclosed!! 💥 💔 💥
    """


    import sys

    import argdoc


    def main():
        args = argdoc.parse_args()
        main.args = args
        sys.stderr.write("{}\n".format(args))
        sys.stderr.write("{}\n".format(argdoc.format_usage().rstrip()))
        sys.stderr.write("/dev/null: error: not implemented\n")
        sys.exit(2)  # exit 2 from rejecting usage


    if __name__ == '__main__':
        main()
    $

    $ bin/argdoc.py /dev/null xyz
    argdoc.py: error: unrecognized args: xyz
    + exit 1
    $

    $ rm -fr bin/p.py
    $

    $ bin/argdoc.py --rip doc /dev/null >/dev/null
    $

    $ bin/argdoc.py --rip argdoc /dev/null >bin/p.py
    $ python3 bin/p.py
    Namespace()
    usage: null [-h]
    /dev/null: error: not implemented
    + exit 2
    $

    $ bin/argdoc.py --rip argparse /dev/null >bin/p.py
    $ python3 bin/p.py
    Namespace()
    $

    $ rm -fr bin/p.py
    $

Drop that starter Doc and Python into your source, call it, and work it up from there


## 2.2 ) Bash

Do nothing, but noisily

    $ bin/bash.py
    usage: bash.py [-h] [-i]
    error: choose --interact
    + exit 2
    $

Decline to do the most basic non-interactive thing

    $ bin/bash.py -c 'echo Hello Bash World'
    usage: bash.py [-h] [-i]
    bash.py: error: unrecognized arguments: -c echo Hello Bash World
    + exit 2
    $


## 2.3 ) Bind

Give help for the keystrokes of the "bin/read.py" command line editor

    $ bin/bind.py -p
    "\C-?": drop-char
    "\C-h": drop-char
    "\C-u": drop-line
    "\C-d": drop-next-char
    "":     end-input
    "\C-j": end-line
    "\C-m": end-line
    "\C-n": next-history
    "\e[B": next-history
    "\C-p": previous-history
    "\e[A": previous-history
    "\C-v": quoted-insert
    "\C-c": raise-keyboard-interrupt
    "\C-r": reprint
    "\C-g": ring-bell
    None:   self-insert
    $

    $ git grep 'd'rop.next.char | 'grep' def | 'grep' '^bin/read.py:'
    bin/read.py:    def _drop_next_char(self, stdin):
    $


## 2.4 ) Cal

    $ bin/cal.py -h 19700101

       December 1969
    Mo Tu We Th Fr Sa Su
            ...
    15 16 17 18 19 20 21
    22 23 24 25 26 27 28
    29 30 31

        January 1970
    Mo Tu We Th Fr Sa Su
              1  2  3  4
     5  6  7  8  9 10 11
    12 13 14 15 16 17 18
            ...

    $


## 2.5 ) Cat

    $ bin/echo.py a b c | tr ' ' '\n' | bin/cat.py -
    a
    b
    c
    $


## 2.6 ) Cp

    $ bin/cp.py
    usage: cp.py [-h] [-i] [-p] [-R] FILE
    cp.py: error: the following arguments are required: FILE
    + exit 2
    $

    $ bin/cp.py f.file
    Namespace(R=None, file='f.file', i=None, p=None)
    usage: cp.py [-h] [-i] [-p] [-R] FILE
    cp.py: error: not implemented
    + exit 2
    $


## 2.7 ) Column

Left-justify columns of words

    $ bin/echo.py 'su per ca $ li fra gil $ is tic ex $ pi a li $ doc ious' | tr '$' '\n' | bin/column.py -t
    su   per   ca
    li   fra   gil
    is   tic   ex
    pi   a     li
    doc  ious
    $

Right-justify columns of numbers

    $ bin/echo.py '27 735 43 $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' | tr '$' '\n' | bin/column.py -t
     27   735   43
     51   785  640
     23   391   62
     14     6   19
    002  8809
    $

Call a column numeric when two-thirds of its cells contain decimal digits

    $ bin/echo.py 'su per ca $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' | tr '$' '\n' | bin/column.py -t
     su   per  ca
     51   785  640
     23   391  62
     14     6  19
    002  8809
    $


## 2.8 ) CspSh

    $ bin/echo.py 'tick → STOP$tick → tick → STOP$CLOCK = (tick → CLOCK)$CLOCK' | tr '$' '\n' | bin/cspsh.py -qi

    ??  tick → STOP
    ⟨tick, STOP⟩

    ??  tick → tick → STOP
    ⟨tick, tick, STOP⟩

    ??  CLOCK = (tick → CLOCK)

    ??  CLOCK
    ⟨tick, tick, tick, CLOCK, ...⟩

    ??

    $


## 2.9 ) Date

    $ bin/date.py -j 123123591970.59123456
    1970-12-31 23:59:59.123456
    $ bin/date.py --date '1970-12-31 23:59:59.123456'
    1970-12-31 23:59:59.123456
    $


## 2.10 ) Dd

    $ bin/dd.py </dev/null

    dd.py: Press ⌃T SIGINFO to see progress, a la Linux:  killall -SIGUSR1 python3
    dd.py: Press ⌃Z to pause, and then tell Bash to 'fg' to resume
    dd.py: Press ⌃C SIGINT to quit, press ⌃\ SIGQUIT if you really mean it
    Press ⌃D EOF to quit

    dd.py: ⌃D EOF
    $


## 2.11 ) DocTestBash

    $ bin/doctestbash.py
    usage: doctestbash.py [-h] [-b] [-q] [-v] tests/
    doctestbash.py: error: more arbitrary arguments not implemented
    + exit 2
    $


## 2.12 ) Echo

    $ bin/echo.py 'Hello, Echo World!'
    Hello, Echo World!
    $

    $ bin/echo.py --v 'Hello, Echo World!'
    ['Hello, Echo World!']
    Hello, Echo World!
    $


## 2.13 ) Exit

    $ bin/exit.py
    $

    $ bin/exit.py 0
    $

    $ bin/exit.py 1
    + exit 1
    $

    $ bin/exit.py -1
    + exit 255
    $

    $ bin/exit.py 256  # alias of zero
    exit.py: error: returning 256 as 0
    $

    $ exit 256
    $

    $ exit 258
    + exit 2
    $


## 2.14 ) Expand

    $ bin/expand.py - </dev/null
    $

    $ bash -c "bin/echo.py -n $'t\tr\rn\n'" | bin/expand.py | cat -etv
    t       r$
    n$
    $

    $ bin/echo.py 'åéîøü←↑→↓⇧⌃⌘⌥💔💥😊😠😢' | bin/expand.py
    åéîøü←↑→↓⇧⌃⌘⌥💔💥😊😠😢
    $

    $ bin/echo.py $'\xC2\xA0 « » “ ’ ” – — ′ ″ ‴ ' | bin/expand.py --plain
      " " " ' " - -- ' '' '''
    $


## 2.15 ) Find

    $ bin/find.py /dev/null
    /dev/null
    $

    $ rm -fr finddir/
    $

    $ bin/mkdir.py -p finddir/a/b/c finddir/p/q/r
    $ bin/echo.py hello >finddir/a/b/d
    $ bin/echo.py goodbye > finddir/a/b/e
    $

    $ bin/find.py finddir/
    finddir
    finddir/a
    finddir/p
    finddir/a/b
    finddir/a/b/d
    finddir/a/b/e
    finddir/a/b/c
    finddir/p/q
    finddir/p/q/r
    $

    $ rm -fr finddir/
    $


## 2.16 ) Fmt

    $ bin/echo.py $(seq 0 39) | bin/fmt.py -w42  # split to fit inside width
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 38 39
    $

    $ bin/echo.py $(seq 0 39) | tr -d ' ' | bin/fmt.py -w42  # no split at width
    0123456789101112131415161718192021222324252627282930313233343536373839
    $

    $ bin/echo.py su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious | bin/fmt.py -w42  # no split at "-"
    su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious
    $

    $ bin/fmt.py --ruler -w72  # ends in column 72
    _2345678_0123456_8901234_6789012_4567890 2345678_0123456_8901234_6789012
    $


## 2.17 ) Grep

Search with no key

    $ bin/grep.py
    cd -
    $

Search in any order

    $ bin/grep.py quit vim
    # vim  : ZZ ZQ  => ex command such as :q, save-then-quit-vim, quit-vim-without-saving
    $

    $ bin/grep.py vim quit
    # vim  : ZZ ZQ  => ex command such as :q, save-then-quit-vim, quit-vim-without-saving
    $

Search out lines to paste into Bash or Zsh, in place of keyboard input

    $ bin/grep.py cd..dev
    cd /dev/null  # always fails inside the shell
    $
    $ bin/grep.py cd..dev | bash -xe
    + cd /dev/null
    bash: line 1: cd: /dev/null: Not a directory
    + exit 1
    $


## 2.18 ) Help

    $ bin/help_.py help
    usage: help_.py [-h] [VERB]

    print some help

    positional arguments:
      VERB        a verb to explain

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      help_.py
      help_.py fmt
      man bash
      man zshall
    $


## 2.19 ) HexDump

    $ bin/hexdump.py -C </dev/null
    Namespace(C=1)
    usage: hexdump.py [-h] [-C]
    hexdump.py: error: not implemented
    + exit 2
    $


## 2.20 ) History

    $ bin/echo.py 'echo abc$echo def$history$' | tr '$' '\n' | bin/bash.py -i

    Pybashish 0.x.y for Linux and Mac OS Terminals
    Type "help" and press Return for more information.
    Type "exit" and press Return to quit, or press ⌃D EOF to quit

    ...@...:...$
    (pybashish) $ echo abc
    abc
    (pybashish) $ echo def
    def
    (pybashish) $ history
        1  echo abc
        2  echo def
        3  history
    (pybashish) $
    (pybashish) $
    + exit 1
    $


## 2.21 ) Hostname

    $ bin/hostname.py
    ...
    $ bin/hostname.py --short
    ...
    $ bin/hostname.py --fqdn
    ...
    $


## 2.22 ) Jq

Require that "jq.py" not crash more often, without requiring correct output

    $ bin/echo.py '["aa", "cc", "bb"]' | bin/jq.py .
    ...
    $

    $ bash -c "bin/jq.py . <(echo '[12, 345, 6789]')"
    ...
    $


## 2.23 ) Ls

List the files and dirs inside a dir

    $ rm -fr lsdir/
    $

    $ bin/mkdir.py -p lsdir/dir
    $ bin/touch.py lsdir/execable
    $ chmod +x lsdir/execable
    $ bin/touch.py lsdir/file
    $ ln -s "$PWD"/lsdir/file lsdir/link
    $

    $ (cd lsdir/ && ../bin/ls.py -C)
    dir  execable  file  link
    $

    $ (cd lsdir/ && COLUMNS=1 ../bin/ls.py -C)
    dir
    execable
    file
    link
    $

    $ (cd lsdir/ && ../bin/ls.py -CF)
    dir/  execable*  file  link@
    $

    $ (cd lsdir/ && ../bin/ls.py -1)
    dir
    execable
    file
    link
    $

    $ (cd lsdir/ && ../bin/ls.py -al)
    drwxr-xr-x  .  .  .  .  ...  .
    drwxr-xr-x  .  .  .  .  ...  ..
    drwxr-xr-x  .  .  .  .  ...  dir
    -rwxr-xr-x  .  .  .  0  ...  execable
    -rw-r--r--  .  .  .  0  ...  file
    -rw-r--r--  .  .  .  0  ...  link
    $

    $ (cd lsdir/ && ../bin/ls.py -l)
    drwxr-xr-x  .  .  .  .  ...  dir
    -rwxr-xr-x  .  .  .  0  ...  execable
    -rw-r--r--  .  .  .  0  ...  file
    -rw-r--r--  .  .  .  0  ...  link
    $

    $ (cd lsdir/ && ../bin/ls.py -CFr)
    link@  file  execable*  dir/
    $ (cd lsdir/ && ../bin/ls.py -CF --sort=name --ascending)
    dir/  execable*  file  link@
    $ (cd lsdir/ && ../bin/ls.py -CF --sort=name --descending)
    link@  file  execable*  dir/
    $

Sort by time and sort by size

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/first
    $ bin/touch.py lsdir/second
    $ bin/touch.py lsdir/third
    $ bin/echo.py a >lsdir/a
    $ bin/echo.py abb >lsdir/abb
    $ bin/echo.py abbccc >lsdir/abbccc
    $

    $ (cd lsdir/ && ../bin/ls.py -Ct)
    abbccc  abb  a  third  second  first
    $ (cd lsdir/ && ../bin/ls.py -C --sort=time -r)
    first  second  third  a  abb  abbccc
    $

    $ (cd lsdir/ && ../bin/ls.py -CS)
    abbccc  abb  a  first  second  third
    $ (cd lsdir/ && ../bin/ls.py -C --sort=size -r)
    first  second  third  a  abb  abbccc
    $

Sort by ext and by version

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/1z.zip
    $ bin/touch.py lsdir/2p.py
    $ bin/touch.py lsdir/3c.c
    $ bin/touch.py lsdir/4q.py

    $ (cd lsdir/ && ../bin/ls.py -CX)
    3c.c  2p.py  4q.py  1z.zip
    $ (cd lsdir/ && ../bin/ls.py -C --sort=ext -r)
    1z.zip  2p.py  4q.py  3c.c
    $

Sort by version

    $ rm -fr lsdir/
    $ bin/mkdir.py lsdir/
    $ bin/touch.py lsdir/3.10.py
    $ bin/touch.py lsdir/3.2.1.py
    $ bin/touch.py lsdir/3.2.9.py
    $ bin/touch.py lsdir/3.py
    $ bin/touch.py lsdir/c.c
    $ bin/touch.py lsdir/z.zip
    $

    $ (cd lsdir/ && ../bin/ls.py -Cv)
    c.c  z.zip  3.py  3.2.1.py  3.2.9.py  3.10.py
    $ (cd lsdir/ && ../bin/ls.py -C --sort=version -r)
    3.10.py  3.2.9.py  3.2.1.py  3.py  z.zip  c.c
    $

Clean up

    $ rm -fr lsdir/
    $


## 2.24 ) Make

    $ bin/make.py </dev/null
    usage: make.py [-h]
    make.py: error: not implemented
    + exit 2
    $


## 2.25 ) MkDir

    $ rm -fr x y z
    $

    $ bin/mkdir.py x/11 y/21 z/31
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'x/11'
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'y/21'
    mkdir.py: error: FileNotFoundError: [Errno 2] No such file or directory: 'z/31'
    + exit 1
    $
    $ bin/mkdir.py -p x/11 y/21 z/31
    $

    $ bin/touch.py x/11/ y/21/ y/22 z/31/ z/32 z/33
    $

    $ bin/ls.py -dCF x/* y/* z/*
    x/11/  y/21/  y/22  z/31/  z/32  z/33
    $

    $ rm -fr x y z
    $


## 2.26 ) Mv

    $ bin/mv.py
    usage: mv.py [-h] [-i] FILE
    mv.py: error: the following arguments are required: FILE
    + exit 2
    $

    $ bin/mv.py f.file
    Namespace(file='f.file', i=None)
    usage: mv.py [-h] [-i] FILE
    mv.py: error: not implemented
    + exit 2
    $


## 2.27 ) Pwd

    $ bin/pwd_.py
    ...
    $ bin/pwd_.py -P
    ...
    $ bin/pwd_.py --brief
    ...
    $ bin/pwd_.py --home
    ...
    $


## 2.28 ) Read

    $ bin/echo.py 'Hello, Line Editor' | bin/read.py
    ? Hello, Line Editor
    'Hello, Line Editor\n'
    $

    $ bin/echo.py 'Hello, ^ULine Editor' | sed 's,\^U,@,g' | tr '@' '\25' | bin/read.py
    ? Line Editor
    'Line Editor\n'
    $

    $ bin/echo.py '⌃ ⌥ ⇧ ⌘ ← → ↓ ↑' | tr -d '\n' | bin/read.py
    ? ⌃ ⌥ ⇧ ⌘ ← → ↓ ↑
    '⌃ ⌥ ⇧ ⌘ ← → ↓ ↑'
    $

## 2.29 ) Rm

    $ bin/rm.py
    Namespace(files=[])
    usage: rm.py [-h] [FILE [FILE ...]]
    rm.py: error: not implemented
    + exit 2
    $


## 2.30 ) SubSh

    $ bin/subsh.py echo 'Hello, Subsh World!'
    {'args': ['echo', 'Hello, Subsh World!'],
     'returncode': 0,
     'stderr': b'',
     'stdout': b'Hello, Subsh World!\n'}
    $

    $ python2 bin/subsh2.py echo 'Hello, Subsh World!'
    {'args': ['echo', 'Hello, Subsh World!'],
     'returncode': 0,
     'stderr': '',
     'stdout': 'Hello, Subsh World!\n'}
    $


## 2.31 ) Tar

    $ rm -fr tardir/ tardir.tgz
    $

    $ bin/mkdir.py -p tardir/a/b/c tardir/p/q/r
    $ bin/echo.py hello >tardir/a/b/d
    $ bin/echo.py goodbye > tardir/a/b/e
    $ tar czf tardir.tgz tardir/  # ordered differently at Mac, at Linux
    $

    $ rm -fr tardir/
    $

    $ bin/tar.py tvf /dev/null/child -tvf tardir.tgz 2>&1 | sort
    tardir/
    tardir/a/
    tardir/a/b/
    tardir/a/b/c/
    tardir/a/b/d
    tardir/a/b/e
    tardir/p/
    tardir/p/q/
    tardir/p/q/r/
    $

    $ bin/tar.py xvkf tardir.tgz 2>&1 | grep -v '^tardir/' | wc
           2       2      14
    $

    $ python2 bin/tar2.py tvf /dev/null/child -tvf tardir.tgz 2>/dev/null
    $ python2 bin/tar2.py xvkf tardir.tgz >/dev/null 2>&1
    $

    $ rm -fr tardir.tgz
    $


## 2.32 ) Touch

    $ rm -fr x y z
    $

    $ bin/mkdir.py x
    $

    $ bin/touch.py x y z
    $

    $ bin/ls.py -dCF x y z
    x/  y  z
    $

    $ rm -fr x y z
    $


## 2.33 ) Tr

    $ cat $(git ls-files) | bin/tr.py | awk '{gsub(/[0Aa]/, "\n&");gsub(/[~]/, "&\n")} //'

     !"#$%&'()*+,-./
    0123456789:;<=>?@
    ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`
    abcdefghijklmnopqrstuvwxyz{|}~
    «µ»åéîøü–—’“”•′″‴←↑→↓⇧⌃⌘⌥⟨⟩💔💥😊😠😢
    $


## 2.34 ) Watch

    $ bin/watch.py
    Namespace(interval=None, words=[])
    usage: watch.py [-h] [-n SECS] [WORD [WORD ...]]
    watch.py: error: not implemented
    + exit 2
    $


## 2.35 ) Wc

    $ bin/wc.py
    Namespace(bytes=None, chars=None, files=[], lines=None, max_line_length=None)
    usage: wc.py [-h] [-L] [-l] [-m] [-c] [FILE [FILE ...]]
    wc.py: error: not implemented
    + exit 2
    $


## 2.36 ) XArgs

    $ echo 'a  b  c$  d  e$$f  g$' | tr '$' '\n' | xargs.py
    a b c d e f g
    $


## 3 ) Additional tests

Show every verb called with no args return exit 0,
else exit status 2 from rejecting usage,
else exit status 2 from being stubbed out

    $ bin/argdoc.py </dev/null >/dev/null 2>&1
    $ bin/bash.py >/dev/null 2>&1
    + exit 2
    $ bin/bind.py </dev/null >/dev/null 2>&1
    $ bin/cal.py </dev/null >/dev/null 2>&1
    $ bin/cat.py </dev/null >/dev/null 2>&1
    $ bin/column.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/cp.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/cspsh.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/date.py </dev/null >/dev/null 2>&1
    $ bin/dd.py </dev/null >/dev/null 2>&1
    $ bin/doctestbash.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/echo.py </dev/null >/dev/null 2>&1
    $ bin/exit.py </dev/null >/dev/null 2>&1
    $ bin/expand.py </dev/null >/dev/null 2>&1
    $ bin/find.py </dev/null >/dev/null 2>&1
    $ bin/fmt.py </dev/null >/dev/null 2>&1
    $ bin/grep.py </dev/null >/dev/null 2>&1
    $ bin/help_.py </dev/null >/dev/null 2>&1
    $ bin/hexdump.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ : history
    $

    $ bin/hostname.py </dev/null >/dev/null 2>&1
    $ bin/jq.py </dev/null >/dev/null 2>&1
    $ bin/ls.py </dev/null >/dev/null 2>&1
    $ bin/make.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/mv.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/pwd_.py </dev/null >/dev/null 2>&1
    $ bin/read.py </dev/null >/dev/null 2>&1
    $ bin/rm.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/subsh.py </dev/null >/dev/null 2>&1
    $ bin/tar.py </dev/null >/dev/null 2>&1
    $ bin/touch.py </dev/null >/dev/null 2>&1
    + exit 2
    $

    $ bin/tr.py </dev/null >/dev/null 2>&1
    $ bin/watch.py </dev/null >/dev/null 2>&1
    + exit 2
    $ bin/wc.py </dev/null >/dev/null 2>&1
    + exit 2
    $

Test optional argument help of "show this help message and exit"
spelled differently than:  -h, --help

    $ rm -fr bin/p.py
    $

    $ bin/argdoc.py --rip doc bin/cal.py >/dev/null
    $

    $ bin/argdoc.py --rip argdoc bin/cal.py >bin/p.py
    $ python3 bin/p.py
    Namespace(h=None, help=None, ymd=None)
    usage: cal.py [--help] [-h] [YMD]
    bin/cal.py: error: not implemented
    + exit 2
    $

    $ bin/argdoc.py --rip argparse bin/cal.py >bin/p.py
    $ python3 bin/p.py
    Namespace(h=None, help=None, ymd=None)
    $

    $ rm -fr bin/p.py
    $

Clean up

    $ rm -fr ../pybashish/bin/argdoc.pyc
    $ rm -fr ../pybashish/bin/pybashish.pyc
    $


// FIXME: remake this into a ".md" Markdown file


# copied from:  git clone https://github.com/pelavarre/pybashish.git
