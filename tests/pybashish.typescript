pathWelcome to testing PyBashIsh


Contents
========

+ 1. Welcome
++ 1.1 ) Hello Bash Doc World
++ 1.2 ) PyBashIsh works like Bash
+ 1.3 ) PyBashIsh Pwd works like Bash Pwd, but better
+ 2 ) Man PyBashIsh All
++ 2.1 ) ArgDoc
++ 2.2 ) Bash
++ 2.3 ) Bind
++ 2.4 ) Cat
++ 2.5 ) Clips
++ 2.6 ) Column
++ 2.6 ) Cp
++ 2.7 ) Date
++ 2.8 ) Dd
++ 2.9 ) DocTestBash
++ 2.10 ) Echo
++ 2.11 ) Find
++ 2.12 ) Fmt
++ 2.13 ) Grep
++ 2.14 ) Help
++ 2.15 ) HexDump
++ 2.16 ) Hostname
++ 2.17 ) Ls
++ 2.18 ) Mv
++ 2.19 ) Pwd
++ 2.20 ) Read
++ 2.21 ) Rm
++ 2.22 ) SubSh
++ 2.23 ) Touch
++ 2.24 ) Watch
++ 2.25 ) Wc

To refresh this table of contents, try:

    cat tests/pybashish.typescript | grep '^#'



# 1. Welcome

## 1.1 ) Hello Bash Doc World

This file is a Bash Doc Test file

This file is like a Doc Test file of Python "import doctest",
except this file is for testing Python inside Bash, not for testing Python apart from Bash

To run this file, try:

    bin/doctestbash.py tests/pybashish.typescript


## 1.2 ) PyBashIsh works like Bash

You can call PyBashIsh in place of Bash

PyBashIsh is bits of Bash, rewritten in the kinder Literate programming style, as Python

PyBashIsh does a few things much much better, some things just as well, and many things more poorly

    $ pwd
    .../pybashish
    $

    $ (echo; echo echo "'Hello, PyBashish World.'"; echo; echo help) | python3 ../pybashish/

    Pybashish 0.x.y for Linux and Mac OS Terminals
    Type "help" and press Return for more information.
    Type "exit" and press Return to quit, or press âŒƒD EOF to quit

    ...@...:...$
    (pybashish) $
    (pybashish) $ echo 'Hello, PyBashish World.'
    Hello, PyBashish World.
    (pybashish) $
    (pybashish) $ help

    For more information, try one of these:

    argdoc --help
    bash --help
    bind --help
    cat --help
    clips --help
    column --help
    cp --help
    date --help
    dd --help
    doctestbash --help
    echo --help
    find --help
    fmt --help
    grep --help
    help --help
    hexdump --help
    hostname --help
    ls --help
    mv --help
    pwd --help
    read --help
    rm --help
    subsh --help
    touch --help
    watch --help
    wc --help

    (pybashish) $
    + exit 1
    $

We've not yet delivered much test coverage for what works inside PyBashIsh

It's a bug if it surprises you, please tell us about it


# 2 ) Man PyBashIsh All


## 2.1 ) ArgDoc

ArgDoc compiles standard Python Arg Docs into standard Python ArgParser Parsers

Compiling "/dev/null" gives you an Arg Doc that works, to start with

    $ bin/argdoc.py -ijk
    usage: argdoc.py [-h] [--compile] [FILE] [-- [ARG [ARG ...]]]
    argdoc.py: error: unrecognized arguments: -ijk
    + exit 2
    $

    $ bin/argdoc.py
    #!/usr/bin/env python3

    """
    usage: null [-h]

    do good stuff

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      Oh no! No examples disclosed!! ðŸ’¥ ðŸ’” ðŸ’¥
    """

    import argdoc


    def main():
        args = argdoc.parse_args()
        main.args = args
        print(args)


    if __name__ == '__main__':
        main()
    $

    $ bin/argdoc.py /dev/null xyz
    error: argdoc.py: unrecognized args: xyz
    + exit 1
    $

Drop that starter Doc and Python into your source, call it, and work it up from there


## 2.2 ) Bash


## 2.3 ) Bind

Lorem ipsum dolor sit amet

    $ bin/bind.py -p
    "\C-?": drop-char
    "\C-h": drop-char
    "\C-u": drop-line
    "\C-d": drop-next-char
    "":     end-input
    "\C-j": end-line
    "\C-m": end-line
    "\C-n": next-history
    "\e[B": next-history
    "\C-p": previous-history
    "\e[A": previous-history
    "\C-v": quoted-insert
    "\C-c": raise-keyboard-interrupt
    "\C-r": reprint
    "\C-g": ring-bell
    None:   self-insert
    $


## 2.4 ) Cat

    $ echo a b c | tr ' ' '\n' | bin/cat.py -
    a
    b
    c
    $


## 2.5 ) Clips


## 2.6 ) Cp


## 2.6 ) Column

Left-justify columns of words

    $ echo 'su per ca $ li fra gil $ is tic ex $ pi a li $ doc ious' | tr '$' '\n' | bin/column.py -t
    su   per   ca
    li   fra   gil
    is   tic   ex
    pi   a     li
    doc  ious
    $

Right-justify columns of numbers

    $ echo '27 735 43 $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' | tr '$' '\n' | bin/column.py -t
     27   735   43
     51   785  640
     23   391   62
     14     6   19
    002  8809
    $

Call a column numeric when two-thirds of its cells contain decimal digits

    $ echo 'su per ca $ 51 785 640 $ 23 391 62 $ 14 6 19 $ 002 8809' | tr '$' '\n' | bin/column.py -t
     su   per  ca
     51   785  640
     23   391  62
     14     6  19
    002  8809
    $


## 2.7 ) Date


## 2.8 ) Dd


## 2.9 ) DocTestBash


## 2.10 ) Echo

    $ bin/echo.py 'Hello, Echo World!'
    Hello, Echo World!
    $

    $ bin/echo.py --v 'Hello, Echo World!'
    ['Hello, Echo World!']
    Hello, Echo World!
    $


## 2.11 ) Find

    $ bin/find.py /dev/null
    /dev/null
    $


## 2.12 ) Fmt

    $ echo {0..39} | bin/fmt.py -w42  # split to fit inside width
    0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 37 38 39
    $

    $ echo {0..39} | tr -d ' ' | bin/fmt.py -w42  # no split at width
    0123456789101112131415161718192021222324252627282930313233343536373839
    $

    $ echo su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious | bin/fmt.py -w42  # no split at "-"
    su-per-ca-li-fra-gil-is-tic-ex-pi-a-li-doc-ious
    $

    $ bin/fmt.py --ruler -w72  # ends in column 72
    _2345678_0123456_8901234_6789012_4567890 2345678_0123456_8901234_6789012
    $


## 2.13 ) Grep


## 2.14 ) Help

    $ bin/help_.py help
    usage: help_.py [-h] [VERB]

    print some help

    positional arguments:
      VERB        a verb to explain

    optional arguments:
      -h, --help  show this help message and exit

    examples:
      help_.py
      help_.py fmt
      man bash
      man zshall
    $


## 2.15 ) HexDump


## 2.16 ) Hostname


## 2.17 ) Ls


## 2.18 ) Mv


## 2.19 ) Pwd


## 2.20 ) Read

    $ echo 'Hello, Line Editor' | bin/read.py
    ? Hello, Line Editor
    'Hello, Line Editor\n'
    $

    $ echo $'Hello, \x15Line Editor' | bin/read.py
    ? Line Editor
    'Line Editor\n'
    $

## 2.21 ) Rm


## 2.22 ) SubSh

    $ bin/subsh.py echo 'Hello, Subsh World!'
    ('{"args": ["echo", "Hello, Subsh World!"], "returncode": 0, "stdout": "Hello, '
     'Subsh World!\\n", "stderr": ""}')
    $


## 2.23 ) Touch


## 2.24 ) Watch


## 2.25 ) Wc


// FIXME: remake this into a ".md" Markdown file


# copied from:  git clone https://github.com/pelavarre/pybashish.git
